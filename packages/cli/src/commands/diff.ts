import { Command } from 'commander';
import { Logger } from '../utils/logger.js';
import { DiffGenerator } from '../refactoring/diff-generator.js';
import fs from 'fs';
import path from 'path';

interface DiffOptions {
  input: string;
  output?: string;
  apply?: boolean;
  validate?: boolean;
  preview?: boolean;
  verbose?: boolean;
}

/**
 * Unified diff generation and application command
 * Demonstrates RefactoGent's high-quality diff capabilities
 */
export function createDiffCommand(): Command {
  const command = new Command('diff');

  command
    .description('Generate, validate, and apply unified diffs for refactoring operations')
    .option('-i, --input <path>', 'Input diff file or refactoring changes')
    .option('-o, --output <path>', 'Output directory for diff files')
    .option('--apply', 'Apply diff to target files')
    .option('--validate', 'Validate diff before processing')
    .option('--preview', 'Generate preview without applying changes')
    .option('-v, --verbose', 'Enable verbose output')
    .action(async (options: DiffOptions) => {
      const logger = new Logger(!!options.verbose);

      try {
        logger.info('Starting diff processing', {
          input: options.input,
          output: options.output,
          apply: options.apply,
          validate: options.validate,
          preview: options.preview,
        });

        const diffGenerator = new DiffGenerator(logger);

        if (options.validate) {
          // Validate diff
          logger.info('Validating diff...');
          const diffContent = await fs.promises.readFile(options.input, 'utf-8');
          const validation = await diffGenerator.validateDiff(diffContent);

          if (validation.valid) {
            console.log('✅ Diff validation passed');
            if (validation.warnings.length > 0) {
              console.log('⚠️  Warnings:');
              validation.warnings.forEach(warning => console.log(`   ${warning}`));
            }
            if (validation.suggestions.length > 0) {
              console.log('💡 Suggestions:');
              validation.suggestions.forEach(suggestion => console.log(`   ${suggestion}`));
            }
          } else {
            console.log('❌ Diff validation failed');
            validation.errors.forEach(error => console.log(`   ${error}`));
            process.exit(1);
          }
        }

        if (options.preview) {
          // Generate preview
          logger.info('Generating diff preview...');
          const diffContent = await fs.promises.readFile(options.input, 'utf-8');
          const preview = await diffGenerator.generatePreview(diffContent);

          console.log('\n📋 Diff Preview:');
          console.log(preview.summary);
          console.log('\n📁 File Changes:');

          preview.fileChanges.forEach(fileChange => {
            console.log(`\n${fileChange.filePath}:`);
            console.log(`  +${fileChange.linesAdded} lines, -${fileChange.linesRemoved} lines`);
            console.log('  Preview:');
            fileChange.preview.forEach(line => console.log(`    ${line}`));
          });
        }

        if (options.apply) {
          // Apply diff
          logger.info('Applying diff...');
          const diffContent = await fs.promises.readFile(options.input, 'utf-8');
          const result = await diffGenerator.applyDiff(diffContent, options.output || '.', {
            dryRun: false,
            backup: true,
            conflictResolution: 'abort',
          });

          if (result.success) {
            console.log('✅ Diff applied successfully');
            console.log(`📁 Applied to ${result.appliedFiles.length} files`);
            if (result.backups.length > 0) {
              console.log(`💾 Created ${result.backups.length} backups`);
            }
          } else {
            console.log('❌ Failed to apply diff');
            if (result.conflicts.length > 0) {
              console.log('⚠️  Conflicts detected:');
              result.conflicts.forEach(conflict => console.log(`   ${conflict}`));
            }
            process.exit(1);
          }
        }

        if (!options.validate && !options.preview && !options.apply) {
          // Generate diff from refactoring changes
          logger.info('Generating diff from refactoring changes...');

          // This would typically come from a refactoring operation
          // For now, we'll create a sample diff
          const sampleChanges = [
            {
              type: 'insert-function' as const,
              filePath: 'src/utils/helpers.ts',
              position: { start: 0, end: 0, line: 10, column: 1 },
              originalText: '',
              newText: `/**
 * Extracted utility function
 * Generated by RefactoGent
 */
function formatCurrency(amount: number): string {
  return \`$\${amount.toFixed(2)}\`;
}`,
              description: 'Insert extracted function formatCurrency()',
            },
            {
              type: 'replace-with-call' as const,
              filePath: 'src/components/ProductCard.tsx',
              position: { start: 0, end: 0, line: 25, column: 1 },
              originalText: 'const formattedPrice = `$${product.price.toFixed(2)}`;',
              newText: 'const formattedPrice = formatCurrency(product.price);',
              description: 'Replace inline formatting with function call',
            },
          ];

          const diff = await diffGenerator.generateDiff(sampleChanges);

          const outputPath = options.output || './refactogent.diff';
          await fs.promises.writeFile(outputPath, diff);

          console.log('✅ Diff generated successfully');
          console.log(`📄 Diff saved to: ${outputPath}`);
          console.log(`📊 Diff size: ${diff.length} characters`);
        }

        logger.info('Diff processing completed');
      } catch (error) {
        logger.error('Diff processing failed', {
          error: error instanceof Error ? error.message : String(error),
        });
        process.exit(1);
      }
    });

  return command;
}
